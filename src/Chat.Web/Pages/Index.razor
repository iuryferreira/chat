@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject State _state
@inject User _user

@page "/"

<Header />

<Messages>

    @foreach (var message in _state.Messages)
    {
        @if (message.User.Id == _user.Id)
        {
            <MessageSended Text=@message.Text Date=message.Date />
        }
        else
        {
            <MessageReceived Text=@message.Text Date=@message.Date User=@message.User.Username />
        }
    }
    <div id="end-messages"></div>
</Messages>


<div class="container is-fluid" style="position: fixed; bottom:0; margin-bottom: 2vh; ">
    <div class="field has-addons">
        <div class="control is-expanded">
            <input class="input" type="text" placeholder="Escreva algo..." @bind="Text">
        </div>
        <div class="control">
            <button class="button is-info" @onclick="HandleSubmit" disabled="@(!IsConnected)">
                <span class="icon is-small">
                    <i class="fas fa-paper-plane"></i>
                </span>
                <span>Enviar</span>
            </button>
        </div>
    </div>
</div>

@code {

    private HubConnection _connection;

    private string Text { get; set; }

    private bool IsConnected => _connection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(_user.Username))
        {
            _navigationManager.NavigateTo("/login");
        }

        _connection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/chatHub"), options =>
        {
            options.HttpMessageHandlerFactory = _ => new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
            };
        }).Build();
        _connection.On<string>("ReceiveMessage", async _ =>
        {
            StateHasChanged();
            await _jsRuntime.InvokeAsync<string>("scrollToEnd");

        });
        await _connection.StartAsync();
    }

    Task HandleSubmit()
    {
        var text = Text;
        Text = "";
        return _connection.SendAsync("SendMessage", text, _user);
    }

}